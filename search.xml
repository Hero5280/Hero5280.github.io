<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog</title>
    <url>/2021/01/02/blog/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>draft</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/30/cxsj22/</url>
    <content><![CDATA[<h1 id="第二学期周报1"><a href="#第二学期周报1" class="headerlink" title="第二学期周报1"></a>第二学期周报1</h1><hr>
<p>[TOC]</p>
<h2 id="1、总结一下数据库连接常见问题"><a href="#1、总结一下数据库连接常见问题" class="headerlink" title="1、总结一下数据库连接常见问题"></a>1、总结一下数据库连接常见问题</h2><p>关于这个问题，确实有点弱智。。。明明很简单的，好吧还是总结一下吧。</p>
<p>我平时用的数据库是在<em>Linux</em>虚拟机上装的，上学期学习过程中我把虚拟机装在<em>docker</em>里面了，所以呢，呵呵，一般的解决方法是解决不了的，关于这个东西我在网上查看一下，基本找不到，所以我放弃了。</p>
<p> 本机的虚拟机呢密码忘记了，我也不想整了，后面会给出解决方法。我重新装了一个windows的虚拟机。</p>
<p>   1进入MySQL官网：<a href="https://dev.mysql.com/downloads%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E9%80%89%E6%8B%A9%E7%A4%BE%E5%8C%BA%E7%89%88%EF%BC%8C%E8%BF%99%E9%87%8C%E5%B7%B2%E7%BB%8F%E6%8F%90%E7%A4%BA%E5%AE%89%E8%A3%85%E5%8C%85%E6%98%AF32%E4%BD%8D%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E5%B0%86%E5%AE%89%E8%A3%8532%E4%BD%8D%E5%92%8C64%E4%BD%8D%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%B0%B1%E5%A5%BD%E3%80%82">https://dev.mysql.com/downloads这里我们选择社区版，这里已经提示安装包是32位的，但是将安装32位和64位的，所以我们直接下载其中一个就好。</a></p>
<p>  2然后把刚才下载的打开安装</p>
<p>  3安装类型选择Custom-&gt;然后选择mysql sever的版本以及mysql workb的版本随后直接next-&gt;直接Execute-&gt;  然后一直next不用管一直 到出现让你输入你得密码为止-&gt;好吧，一定记住密码（别问为什么很**的一个问题），这个界面你一定要再创建一个新的用户，自己定义  用户名和密码，host为%这样你就不用为了以后出现权限问题而烦恼了！！！（好吧 如果忘了那也没办法后面再说），下一步next-&gt;设置服务名称随便-&gt;然后一直next就好了。</p>
<p>4配置环境变量：右击我的电脑–&gt;属性–&gt;高级系统设置–&gt;高级–&gt;环境变量，在打开的窗口中选择 “系统变量” 下的 “新建” 按钮创建环境变量。</p>
<p>（1）变量名：MYSQL_HOME</p>
<p>（2）变量值：C:\Program Files\MySQL\MySQL Server 8.0（MySQL的安装目录）</p>
<p>配置 path 环境变量</p>
<p>在系统变量中，选择path并单击编辑按钮，然后点击新建，输入：%MYSQL_HOME%\bin，然后一路确定回去。（如果点击“编辑”之后所有变量在一个输入文本框，注意变量值之间用”;”隔开。注意原来Path的变量值末尾有没有;号，如果没有，先输入;号再输入）</p>
<p>（1）变量名：path</p>
<p>（2）变量值：%MYSQL_HOME%\bin 或 C:\Program Files\MySQL\MySQL Server 8.0\bin （MySQL的安装目录里的bin目录）</p>
<p> 5在命令提示符下启动、停止MySQL服务器。这里可能会遇到 “发生系统错误5 拒绝访问” 的错误，这是因为操作的权限不足，需要以管理员身份运行。或者使用安装好的workbench。</p>
<h3 id="连接错误的解决"><a href="#连接错误的解决" class="headerlink" title="连接错误的解决"></a>连接错误的解决</h3><p>1、1045 Access denied for user ‘root’@’localhost’ (using password:YES)是的这是一个错误代码，也是本人很头疼的问题，由于我的数据库安装在docker里面所以我试了很多的方法都不行。但是确实一个很简单的问题，（如果你在安装时创建了一个用户上面说过你就不会出现这个问题，如果出现了。。。那好吧）解决方法如下：</p>
<p>1.找到MySQL安装路径下的my.ini文件，用记事本的方式打开；</p>
<p>2.打开后，找到[mysqld]这个位置；</p>
<p>3.在 [mysqld] 底下添加语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
<p>添加完毕后保存。如果提示不让修改这个文件，则可将它复制到桌面，再用记事本打开它，添加完毕后，将桌面上的文件复制到原来的地方，赋值时选择替换目标文件；（skip-grant-tables作为启动参数的作用：MYSQL服务器不加载权限判断，任何用户都能访问数据库。</p>
<p>也就是说，启用这个参数之后，数据库的安全性会降低。</p>
<p>）</p>
<p>4 然后修改你自己的数据库密码再刷新一遍就好了</p>
<p>还有一个解决方法是这个：</p>
<p>1.首先再服务器的mysql打开cmd输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>接下来会提示输入密码</p>
<p>2.进入成功以后找到表user:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure>
<p>提示database changed表示成功</p>
<p>3.修改表里的参数，也就是权限修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON . TO ‘root’@’%’ IDENTIFIED BY ‘’ WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>
<p>(这个==%==号就是代表任意IP都可以进行数据库的访问)</p>
<p>4.在进入这句话完了以后需要再加上一句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>(告诉mysql进行权限刷新)</p>
<p>5.退出mysql的连接</p>
<p>\q</p>
<p>好了，到了这一步，权限就已经修改，再次远程连接mysql，就可以了。</p>
<h2 id="2、有关JAVA的学习"><a href="#2、有关JAVA的学习" class="headerlink" title="2、有关JAVA的学习"></a>2、有关JAVA的学习</h2><p>学习模块没啥可说的，这个月基本会完成有关基础的学习，以后就是巩固和拓展了，害，基础差，代码都看不懂，人家的代码不想拿来直接用只改参数，那就自己重构。这叫啥没有创新点。学到了面相对象那里，后面就比较重要了。</p>
<h2 id="3、有关聊天室"><a href="#3、有关聊天室" class="headerlink" title="3、有关聊天室"></a>3、有关聊天室</h2><p>聊天室的构成可以说是各种各样，目前打算是java写，肯定是不止于Java的，查看了资料，很多都应用了Socket，所以这个礼拜就学习了解了Socket。</p>
<p>对TCP/IP、UDP、Socket编程这些词，是有点蒙。。。害 菜啊</p>
<h3 id="什么是TCP-IP、UDP？Socket是什么呢？"><a href="#什么是TCP-IP、UDP？Socket是什么呢？" class="headerlink" title="什么是TCP/IP、UDP？Socket是什么呢？"></a>什么是TCP/IP、UDP？Socket是什么呢？</h3><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br> UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。TCP/IP协议族包括运输层、网络层、链路层。</p>
<p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p>
<p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p>
<h3 id="学了一部分的Socket的基本操作，下周看完。"><a href="#学了一部分的Socket的基本操作，下周看完。" class="headerlink" title="学了一部分的Socket的基本操作，下周看完。"></a>学了一部分的Socket的基本操作，下周看完。</h3><p>本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：</p>
<ul>
<li>消息传递（管道、FIFO、消息队列）</li>
<li>同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</li>
<li>共享内存（匿名的和具名的）</li>
<li>远程过程调用（Solaris门和Sun RPC）</li>
</ul>
<p>网络中进程之间的通信，首要解决的问题是如何唯一标识一个进程，否则通信无从谈起。在本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“<strong>ip**</strong>地址<strong>”可以唯一标识网络中的主机，而传输层的“</strong>协议**<strong>+**</strong>端口**”可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。</p>
<p>使用TCP/IP协议的应用程序通常采用应用编程接口：UNIX BSD的套接字（socket）和UNIX System V的TLI（已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用socket。</p>
<p>socket是“open—write/read—close”模式的一种实现，那么socket提供了一些操作对应的函数接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int **socket**(int domain, int type, int protocol);</span><br></pre></td></tr></table></figure>
<p> socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而socket()用于创建一个socket描述符（socket descriptor），它唯一标识一个socket。这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p>
<p>正如可以给fopen的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为：</p>
<p>·    domain：即协议域，又称为协议族（family）。常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。</p>
<p>·    type：指定socket类型。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等。</p>
<p>·    protocol：故名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议（额这些协议还得学！！！）注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。</p>
<p>当我们调用socket创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则就当调用connect()、listen()时系统会自动随机分配一个端口。</p>
<p>bind()函数把一个地址族中的特定地址赋给socket。例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure>
<p>函数的三个参数分别为：</p>
<p>·    sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。bind()函数就是将给这个描述字绑定一个名字。</p>
<p>·    addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同。</p>
<p>·    addrlen：对应的是地址的长度。</p>
<p>通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。</p>
<p>就看了这两个函数，下周继续。</p>
<a id="more"></a>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/04/07/cxsj23/</url>
    <content><![CDATA[<h1 id="第二学期周报2"><a href="#第二学期周报2" class="headerlink" title="第二学期周报2"></a>第二学期周报2</h1><p>[TOC]</p>
<h2 id="一、java"><a href="#一、java" class="headerlink" title="一、java"></a>一、java</h2><p>其实 没啥可写的都是以前c++学过的 只不过是仔细看一下有啥不同，并且操作一下实例为了未来的几周做打算，不过目前学的到了关键阶段了</p>
<h3 id="“万事万物皆对象”"><a href="#“万事万物皆对象”" class="headerlink" title="“万事万物皆对象”"></a>“万事万物皆对象”</h3><p>1.在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</p>
<p>&gt;Scanner ,string等</p>
<p>&gt;文件:File</p>
<p>&gt;网络资源:URL</p>
<p>2.涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</p>
<p>内存解析的说明</p>
<p>3.引用类型的变量，只可能存储两类值: null 或地址值(含变量的类型)</p>
<p>匿名对象的使用</p>
<p>理解:我们创建的对象，没有显式的赋给一个变量名。即为匿名对象</p>
<p>特征:匿名对象只能调用一次。</p>
<p>方法的重载(overload)loading…</p>
<p>1.定义:在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。”两同一不同”:同一个类、相同方法名参数列表不同:参数个数不同，参数类型不同</p>
<p>判断是否是重载跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系!</p>
<p>在通过对象调用方法时，确定某一个指定的方法:法名—&gt;参数列表</p>
<p>可变个数形参的方法</p>
<p>1.jdk 5.0新增的内容</p>
<p>2.具体使用:</p>
<p>可变个数形参的格式:数据类型…变量名；当调用可变个数形参的方法时，传入的参数个数可以是:0个，1个,2个，。。。2.3 可变个数形参的方法与本类中方法名相同,形参不同的方法之间构成重载；可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。2.5可变个数形参在方法的形参中，必须声明在末尾</p>
<p>关于变量的赋值:</p>
<p>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。</p>
<p>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</p>
<p>方法的形参的传递机制:值传递</p>
<p>1.形参:方法定义时，声明的小括号内的参数</p>
<p>实参:方法调用时，实际传递给形参的数据</p>
<p>2.值传递机制:</p>
<p>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。</p>
<p>构造器</p>
<p>如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器2.定义构造器的格式:权限修饰符类名(形参列表){0}</p>
<p>一个类中定义的多个构造器，彼此构成重载</p>
<p>—旦我们显式的定义了类的构造器之后，系统就不在提供默认的空参构造器</p>
<h2 id="二、socket"><a href="#二、socket" class="headerlink" title="二、socket"></a>二、socket</h2><p>（继续上一周的学习，把基本函数搞清楚，以及做一些拓展）</p>
<h3 id="1-listen-、connect-函数"><a href="#1-listen-、connect-函数" class="headerlink" title="1 listen()、connect()函数"></a>1 listen()、connect()函数</h3><p>如果作为一个服务器，在调用socket()、bind()之后就会调用listen()来监听这个socket，如果客户端这时调用connect()发出连接请求，服务器端就会接收到这个请求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int listen(int sockfd, int backlog);</span><br><span class="line"></span><br><span class="line">int connect(int sockfd, const struct sockaddr \*addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure>
<p>listen函数的第一个参数即为要监听的socket描述字，第二个参数为相应socket可以排队的最大连接个数。socket()函数创建的socket默认是一个主动类型的，listen函数将socket变为被动类型的，等待客户的连接请求。</p>
<p>connect函数的第一个参数即为客户端的socket描述字，第二参数为服务器的socket地址，第三个参数为socket地址的长度。客户端通过调用connect函数来建立与TCP服务器的连接。</p>
<h3 id="2-accept-函数"><a href="#2-accept-函数" class="headerlink" title="2.accept()函数"></a>2.accept()函数</h3><p>TCP服务器端依次调用socket()、bind()、listen()之后，就会监听指定的socket地址了。TCP客户端依次调用socket()、connect()之后就想TCP服务器发送了一个连接请求。TCP服务器监听到这个请求之后，就会调用accept()函数取接收请求，这样连接就建立好了。之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int accept(int sockfd, struct sockaddr \*addr, socklen_t \*addrlen);</span><br></pre></td></tr></table></figure>
<p>accept函数的第一个参数为服务器的socket描述字，第二个参数为指向struct sockaddr *的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果accpet成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的TCP连接。</p>
<p>注意：accept的第一个参数为服务器的socket描述字，是服务器开始调用socket()函数生成的，称为监听socket描述字；而accept函数返回的是已连接的socket描述字。一个服务器通常通常仅仅只创建一个监听socket描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。</p>
<h3 id="3-read-、write-等函数"><a href="#3-read-、write-等函数" class="headerlink" title="3.read()、write()等函数"></a>3.read()、write()等函数</h3><p>经过上面的过程，服务器与客户端的额连接基本已经连接好了，可以调用网络I/O进行读写操作了，即实现了网咯中不同进程之间的通信。网络I/O操作有下面几组：</p>
<p>read()/write()</p>
<p>recv()/send()</p>
<p>readv()/writev()</p>
<p>recvmsg()/sendmsg()</p>
<p>recvfrom()/sendto()</p>
<p>recvmsg()/sendmsg()函数，这两个函数是最通用的I/O函数，实际上可以把上面的其它函数都替换成这两个函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssize_t sendmsg(int sockfd, const struct msghdr msg, int flags);</span><br><span class="line"></span><br><span class="line">ssize_t recvmsg(int sockfd, struct msghdr msg, int flags);</span><br></pre></td></tr></table></figure>


<p>read函数是负责从fd中读取内容.当读成功时，read返回实际所读的字节数，如果返回的值是0表示已经读到文件的结束了，小于0表示出现了错误。如果错误为EINTR说明读是由中断引起的，如果是ECONNREST表示网络连接出了问题。</p>
<p>write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数。失败时返回-1，并设置errno变量。在网络程序中，当我们向套接字文件描述符写时有俩种可能。</p>
<p>1)write的返回值大于0，表示写了部分或者是 全部的数据。</p>
<p>2)返回的值小于0，此时出现了错误。我们要根据错误类型来处理。如果错误为EINTR表示在写的时候出现了中断错误。如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接)。</p>
<h3 id="4-close-函数"><a href="#4-close-函数" class="headerlink" title="4. close()函数"></a>4. close()函数</h3><p>在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的socket描述字，好比操作完打开的文件要调用fclose关闭打开的文件。</p>
<p>close一个TCP socket的缺省行为时把该socket标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。</p>
<h3 id="5-tcp建立连接要进行“三次握手”"><a href="#5-tcp建立连接要进行“三次握手”" class="headerlink" title="5.tcp建立连接要进行“三次握手”"></a>5.tcp建立连接要进行“三次握手”</h3><p>有关这里有几个关键词，也算是拓展学习了吧。（目前只是大致了解，下一步再细学）</p>
<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG</p>
<p><strong>SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。</strong></p>
<p>其中，ACK是可能与SYN，FIN等同时使用的，比如：SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。</p>
<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>
<p>PSH为1的情况，一般只出现在DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>
<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>
<p>回归正题</p>
<p>客户端向服务器发送一个SYN J</p>
<p>服务器向客户端响应一个SYN K，并对SYN J进行确认ACK J+1</p>
<p>客户端再想服务器发一个确认ACK K+1</p>
<p>只有就完了三次握手。还有关于TCP握手协议的细致内容下一步会进行学习.</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/04/14/cxsj24/</url>
    <content><![CDATA[<h1 id="第二学期周报3"><a href="#第二学期周报3" class="headerlink" title="第二学期周报3"></a>第二学期周报3</h1><p>一.重写的规定:</p>
<p>方法的声明:权限修饰符返回值类型方法名(形参列表）</p>
<p> throws异常的类型{</p>
<p>//方法体</p>
<p>}</p>
<p>约定俗称:子类中的叫重写的方法，父类中的叫被重写的方法</p>
<p>子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p>
<p>&gt;特殊情况:子类不能重写父类中声明为private权限的方法返回值类型:</p>
<p>&gt;父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</p>
<p>&gt;父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类</p>
<p>&gt;父类被重写的方法的返回值类型是基本数据类型(比如:double)，则子类重写的方法的返回值类型必须是相同子类</p>
<p>&gt;重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p>
<p>&gt;子类和父类中的同名同参数的方法要么都声明为非static的(考虑重写），要么都声明为static的(不是重写)。</p>
<p>&gt;对于class的权限修饰只可以用public和ldefault(缺省)。public类可以在任意地方被访问。</p>
<p>default类只可以被同一个包内部的类访问。</p>
<p>二、super关键字的使用</p>
<p>1.super理解为:父类的</p>
<p>2.super可以用来调用:属性、方法、构造器</p>
<p>3.1我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下省略”super.”</p>
<p>3.2特殊情况:当子类和父类中定义了同名的属性时，要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式,表明调用的是父类中声明的属性。</p>
<p>3.3 特殊情况:当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</p>
<p>四、调用父类的构造器</p>
<p>&gt;子类中所有的构造器 默认都会访问父类中 空参数的构造器</p>
<p>&gt;当父类中没有空参数的构造器时，子类的构造器必须通过this(参数列表)或者super( 参数列表)语句指定调用本类或者父类中相应的构造器。同时，只能”二选一”，且必须放在构造器的首行</p>
<p>&gt;如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错</p>
<p>五、多态性</p>
<p>1．多态性:可以理解为一个事物的多种形态。</p>
<p>2.何为多态性:对象的多态性:父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p>
<p>3．多态的使用:虚拟方法调用</p>
<p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。总结:编译，看左边;运行，看右边。</p>
<p>4.多态性的使用前提:类的继承关系方法的重写</p>
<p>5.对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</p>
<p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p>
<p>从编译和运行的角度看：重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类</p>
<p>和子类的，即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</p>
<p>而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体</p>
<p>方法，这称为“晚绑定”或“动态绑定”。如果它不是晚绑定，它就不是多态。</p>
<p>六、instanceof 操作符</p>
<p>x instanceof A ：检验x 是否为类A 的对象，返回值为boolean 型。</p>
<p>要求x所属的类与类A必须是子类和父类的关系，否则编译错误。</p>
<p>如果x属于类A的子类B，x instanceof A值也为true。</p>
<p>对Java 对象的强制类型转换称为造型</p>
<p>从子类到父类的类型转换可以自动进行</p>
<p>从父类到子类的类型转换必须通过造型( 强制类型转换) 实现</p>
<p>无继承关系的引用类型间的转换是非法的</p>
<p>在造型前可以使用instanceof</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>创新实践周报1</title>
    <url>/2021/01/02/%E5%88%9B%E6%96%B0%E5%AE%9E%E8%B7%B5%E5%91%A8%E6%8A%A51/</url>
    <content><![CDATA[<p>小白入门QAQ</p>
<a id="more"></a>
<h1 id="创新实践周报"><a href="#创新实践周报" class="headerlink" title="创新实践周报"></a>创新实践周报</h1><p>[TOC]</p>
<img src="C:\Users\86178\Pictures\Saved Pictures\壁纸ilil\wallhaven-3zkow9.jpg" style="zoom:33%;" />

<h2 id="本周工作计划"><a href="#本周工作计划" class="headerlink" title="本周工作计划"></a>本周工作计划</h2><h3 id="1-对爬取疫情数据并进行可视化的作业进行总结，以及对工具进行更加系统的学习。"><a href="#1-对爬取疫情数据并进行可视化的作业进行总结，以及对工具进行更加系统的学习。" class="headerlink" title="1.   对爬取疫情数据并进行可视化的作业进行总结，以及对工具进行更加系统的学习。"></a>1.   对爬取疫情数据并进行可视化的作业进行总结，以及对工具进行更加系统的学习。</h3><h3 id="2-完成小组安排的项目选择任务"><a href="#2-完成小组安排的项目选择任务" class="headerlink" title="2.   完成小组安排的项目选择任务"></a>2.   完成小组安排的项目选择任务</h3><h2 id="完成内容"><a href="#完成内容" class="headerlink" title="完成内容"></a>完成内容</h2><p>​        <strong>1.</strong></p>
<ul>
<li>​        \1.   通过比较爬虫三大库Requests库，<em>Beautifulsoup</em>库，以及<em>lxml</em>库，虽然获得请求头的方法有些不同外,Requests库还有get()方法        以及post()方法，后者勇于提交表单来爬取需要登录才能获得数据的网站，Requests库请求不会一帆风顺，可能会出现错误为四种：<em>ConnectionError</em>异常（网络问题）、<em>HTTPEeeor</em>异常（返回了状态不成功的代码，404错误）、<em>Timeout</em>异常（请求超时）、TooManyRedirects异常（请求次数超过了限定的次数）；<em>Beautifulsoup</em>库除了python标准库中的HTML解析器外还支持一些第三方的解析器拥有<em>find</em>()、<em>find_all</em>()、<em>selector</em>()方法；<em>Lxml</em>库的解析速度比<em>Beautifulsoup</em>快。        </li>
</ul>
<p>​     <strong>2.</strong></p>
<ul>
<li>​          \1.   Re模板拥有所有的正则表达式常用的有三个函数*search()<em>函数用来匹配第一个符合规律的内容，返回一个正则表达式对象、</em>sub()<em>函数用于替换字符串中的匹配项、</em>findall()*函数匹配所有符合规律的内容，并以列表的形式返回。</li>
</ul>
<p>​      <strong>3.</strong></p>
<ul>
<li>​         \1.   数据可视化本周简单学习了几个库有<em>datatime</em>库：date即日期，类的构成为 （年, 月，日），对应的 <em>year、month、day</em>均为<em>date</em>类的属性（type为int）。一些主要的方法有：today()返回当日信息；weekday()返回当前是星期几，（周一为0）从0开始计数；<em>isoweekday()</em> 返回当前是星期几，（周一为1）从1开始计数：<em>isoformat()*返回日期以ISO格式，即 *’YYYY-MM-DD’</em>的字符串；<em>strftime</em>(…)方法可自定义日期表示法（<em>time</em>和<em>datetime</em>也均可使用）；<em>date.replace(year/month/day)</em> 生成一个新的日期对象，用参数指定的年，月，日代替原有对象中的属性。（原有对象仍保持不变）。<em>Pyecharts</em>库：此库打算以后仔细学习，内容过大。</li>
</ul>
<h2 id="下周计划"><a href="#下周计划" class="headerlink" title="下周计划"></a>下周计划</h2><p>学习js、vue.js</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>blog</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>JS</title>
    <url>/2021/01/03/%E5%91%A8%E6%8A%A52/</url>
    <content><![CDATA[<p>js—javascript</p>
<a id="more"></a>
<h1 id="创新实践周报2"><a href="#创新实践周报2" class="headerlink" title="创新实践周报2"></a>创新实践周报2</h1><p>$$<br>由于是小白，从零开始，笔记有的内容可能看上去有些智障，略略略<br>本文内容根据<a href="https://www.w3school.com.cn/js/index.asp">https://www.w3school.com.cn/js/index.asp</a><br>对的我就是这样我本以为我是学前端的，但是几周后我要学习后端了QAQ<br>$$</p>
<hr>
<p>[TOC]</p>
<h2 id="1-初步入门JS基本语法"><a href="#1-初步入门JS基本语法" class="headerlink" title="1.初步入门JS基本语法"></a>1.初步入门JS基本语法</h2><p>1.关于js的一些基本常识：</p>
<ul>
<li><p>1.HTML定义网页内容；CSS规定网页布局，JavaScript对网页进行编程</p>
</li>
<li><p>2.getElementById()是多个JavaScript HTML的方法之一：可以该方法来“查找” id=”<strong><strong>”HTML元素，并把元素内容      （innerHTML）更改为 “Hello JavaScript”：—–document.getElementById(“</strong></strong>”).innerHTML = “Hello JavaScript”（JavaScript可以改变HTML的内容）</p>
</li>
<li><p>3.JavaScript同时接受单引号和双引号</p>
</li>
<li><p>4.可以改变HTML的属性、内容、样式（CSS）、隐藏元素、显示元素。</p>
</li>
</ul>
<h2 id="2-JS的使用"><a href="#2-JS的使用" class="headerlink" title="2.JS的使用"></a>2.JS的使用</h2><ul>
<li><ol>
<li>在HTML中JS的代码必须位于<script>和</script>之间</li>
</ol>
</li>
<li><p>旧的 JavaScript 例子也许会使用 type 属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><ol start="3">
<li>type 属性不是必需的。JavaScript 是 HTML 中的默认脚本语言。</li>
</ol>
</li>
<li><ol start="4">
<li>您能够在 HTML 文档中放置任意数量的脚本。脚本可被放置与 HTML 页面的 <body>或 <head>部分中，或兼而有之。</li>
</ol>
</li>
<li><ol start="5">
<li>把脚本置于 <strong><body></strong> 元素的底部，可改善显示速度，因为脚本编译会拖慢显示</li>
</ol>
</li>
<li><ol start="6">
<li><p>脚本可放置于外部文件中，如外部文件：myscript.js，要是需要外部脚本需要在<script>中的标签<src>(source)属性中设置脚本名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src &#x3D; “myscript.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="7">
<li>您可以在<head>和<body>中放置外部脚本引用。该脚本的表现与它被置于 <script> 标签中是一样的。但是外部脚本不得有<script>标签</li>
</ol>
</li>
<li><ol start="8">
<li>在外部文件中放置脚本有如下优势：1分离了 HTML 和代码2使 HTML 和 JavaScript 更易于阅读和维护3已缓存的 JavaScript 文件可加速页面加载，如需向一张页面添加多个脚本文件 - 请使用多个 script 标签：</li>
</ol>
</li>
<li><ol start="9">
<li><p>外部引用：可通过完整的URL或者相对于当前网页的路径引用外部脚本如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;www.w3school.com.cn&#x2F;js&#x2F;myScript1.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>相对路径指向了相对于当前页面的文件。在本例中，文件路径指向了位于当前网站根目录中images文件夹里的一个文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot; &#x2F;images&#x2F;picture.jpg&quot; alt&#x3D;&quot;flower&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在本例中，文件路径指向了位于当前文件夹中images 文件夹里的一个文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;images&#x2F;picture.jpg&quot; alt&#x3D;&quot;flower&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>在本例中，文件路径指向了位于当前文件夹的上一级文件夹中images文件夹里的一个文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot; ..&#x2F;images&#x2F;picture.jpg&quot; alt&#x3D;&quot;flower&quot;&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ul>
<h2 id="3-JS的输出"><a href="#3-JS的输出" class="headerlink" title="3.JS的输出"></a>3.JS的输出</h2><ul>
<li>\1.   JS不提供任何打印或显示的函数.</li>
<li>\1.   可以使用<strong>window.alert()写</strong>入警告框；<strong>document.write()**写入</strong>html<strong>输出；</strong>innerHTML<strong>写入HTML元素；</strong>console.log()**写入浏览器控制台.</li>
<li>\1.   Id属性定义HTML元素，<strong>innerHTML</strong>属性定义<strong>HTML</strong>内容.</li>
<li>\1.   更改 <strong>HTML</strong> 元素的 i<strong>nnerHTML</strong> 属性是在 <strong>HTML</strong> 中显示数据的常用方法。</li>
<li><em>1.</em>   在 <strong>HTML</strong> 文档完全加载后使用**document.write()**将删除所有已有的HTML</li>
</ul>
<h2 id="4-JS语法-我只记自己不熟悉的所以不全面"><a href="#4-JS语法-我只记自己不熟悉的所以不全面" class="headerlink" title="4.JS语法(我只记自己不熟悉的所以不全面)"></a>4.JS语法(我只记自己不熟悉的所以不全面)</h2><ul>
<li><strong>1</strong>      以分号结束语句不是必需的，但我们仍然强烈建议您这么做。</li>
<li><strong>1</strong>      <strong>JavaScript</strong> 会忽略多个空格。您可以向脚本添加空格，以增强可读性。</li>
<li><strong>1</strong>      在 JavaScript 中，首字符必须是字母、下划线（**-<strong>）或美元符号（</strong>$<strong>）连串的字符可以是字母、数字、下划线或美元符号。数值不  可以作为首字符。这样，</strong>JavaScript** 就能轻松区分标识符和数值。</li>
<li><strong>1</strong>      <strong>JavaScript</strong>中不能使用连字符。它是为减法预留的。</li>
<li><strong>1</strong>      <strong>JavaScript</strong> 程序员倾向于使用以小写字母开头的驼峰大小写</li>
<li><strong>1</strong>      在 <strong>JavaScrip</strong>t 中，等号（**=<strong>）是赋值运算符，而不是“等于”运算符。</strong>JavaScript** 中的“等于”运算符是 ==</li>
<li><strong>1</strong>      如果把要给数值放入引号中，其余数值会被视作字符串并被级联。</li>
</ul>
<h2 id="5-JS算数"><a href="#5-JS算数" class="headerlink" title="5.JS算数"></a>5.JS算数</h2><ul>
<li><p>取幂运算符（******）将第一个操作数提升到第二个操作数的幂。</p>
</li>
<li><p><strong>JavaScript</strong> 从左向右计算表达式。不同的次序会产生不同的结果</p>
</li>
<li><p><strong>JavaScript</strong> 拥有动态类型。这意味着相同变量可用作不同类型</p>
</li>
<li><p><strong>typeof</strong> 运算符返回变量或表达式的类型：</p>
</li>
<li><pre><code>typeof &quot;Bill Gatec &quot;   //返回string
typeof 0               //返回number</code></pre>
</li>
</ul>
<ul>
<li><p><strong>typeof</strong> 运算符对数组返回 <strong>“object”**，因为在 **JavaScript</strong> 中数组属于对象</p>
</li>
<li><p>在 <strong>JavaScript</strong> 中，<strong>null</strong> 的数据类型是对象。可以通过设置值为 <strong>null</strong> 清空对象也可以通过设置值为 <strong>undefined</strong> 清空对象</p>
</li>
<li><p><strong>typeof</strong> 运算符把数组返回为 <strong>“object”**，因为在 **JavaScript</strong> 中数组即对象</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>JS</tag>
        <tag>前端</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>周报、JS</title>
    <url>/2021/01/03/%E5%91%A8%E6%8A%A53/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="创新实践周报3"><a href="#创新实践周报3" class="headerlink" title="创新实践周报3"></a>创新实践周报3</h1><p><strong><em>继续js的学习</em></strong></p>
<hr>
<p>[TOC]</p>
<h2 id="JS数学"><a href="#JS数学" class="headerlink" title="JS数学"></a>JS数学</h2><p><strong>1</strong>     <strong>Math**</strong>允许对数字执行数学任务**</p>
<p><strong>2</strong>     <strong>Math..round(x)**</strong>返回**<strong>x**</strong>四舍五入最近的整数**</p>
<p><strong>3</strong>     <strong>Math.pow(x,y)**</strong>返回**<strong>x**</strong>的**<strong>y**</strong>次幂**</p>
<p><strong>4</strong>     <strong>Math.sprt(x)**</strong>返回**<strong>x**</strong>的平方根**</p>
<p><strong>5</strong>     <strong>Math.abs(x)**</strong>返回**<strong>x**</strong>的绝对值**</p>
<p><strong>6</strong>     <strong>Math.ceil(x)**</strong>返回**<strong>x**</strong>的上舍入的整数，如：**<strong>Math.ceil(4.2)</strong> <strong>其实就是**</strong>5**</p>
<p><strong>7</strong>     <strong>Math.floor(x)**</strong>返回**<strong>x**</strong>的下舍入的整数**</p>
<p><strong>8</strong>     <strong>Math.sin(x)**</strong>以及**<strong>Math.cos(x)**</strong>返回**<strong>x**</strong>的正弦值，余弦值**</p>
<p><strong>9</strong>     <strong>Math.max()**</strong>以及**<strong>Math.min()**</strong>返回列表的最大值以及最小值**</p>
<p><strong>10</strong>   <strong>Math.random()**</strong>返回**<strong>0-1**</strong>之间的随机数（左闭右开）**</p>
<p><strong>11</strong>   <strong>Math**</strong>属性（常量）：**</p>
<p><strong>12</strong>   <strong>Math.E</strong>               //返回欧拉指数(Euler ‘s number)<br><strong>13</strong>   <strong>Math.SQRT2</strong>      //返回 2的平方根<br><strong>14</strong>   <strong>Math.SQRT1_2</strong>   //返回1/2的平方根 </p>
<p><strong>15</strong>   <strong>Math.LN2</strong>              //返回 2的自然对数<br><strong>16</strong>   <strong>Math.LN10</strong>           //返回10的自然对数<br><strong>17</strong>   <strong>Math.LOG2E</strong>         //返回以2为底的e 的对数(约等于1.414)<br><strong>18</strong>   <strong>Math.LOG10E</strong>       //返回以10为底的e 的对数(约等于0.434)</p>
<p><strong>19</strong>   与其他全局对象不一样<strong>math</strong>对象没有构造函数，方法和属性是静态的，可以在不首先创造对象的情况下使用方法和属性</p>
<p><strong>20</strong>    <strong>log(x)</strong>                       //返回×的自然对数(底为e)</p>
<p><strong>21</strong>    <strong>exp(x)</strong>                        //返回Ex的值</p>
<h2 id="JS随机"><a href="#JS随机" class="headerlink" title="JS随机"></a>JS随机</h2><ol>
<li><p><strong>Math.random()</strong> 总是返回小于 1 的数。</p>
</li>
<li><p><strong>Math.random()</strong> 与 <strong>Math.floor()</strong> 一起使用用于返回随机整数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.random(Math.random()*10);</span><br></pre></td></tr></table></figure>
<p>以此类推可以返回一定范围内的随机数</p>
</li>
<li><pre><code>Math.floor(Math.random() *(max - min) ) +min;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   返回min和 max之间的随机数（左闭右开)</span><br><span class="line"></span><br><span class="line">4. &#96;&#96;&#96;</span><br><span class="line">   Math.floor(Math.random() *(max - min + 1)) + min;</span><br></pre></td></tr></table></figure>
返回min和l max 之间的随机数（闭区间)




</code></pre>
</li>
</ol>
<h2 id="JS逻辑"><a href="#JS逻辑" class="headerlink" title="JS逻辑"></a>JS逻辑</h2><ol>
<li>**Boolean()**函数确定表达式或者或变量是否为真</li>
<li><strong>Undefined</strong>、<strong>null、NaN</strong>的布尔值是 <strong>false</strong></li>
<li>布尔可以是对象<strong>var x = new Boolean(\</strong>*)**</li>
</ol>
<h2 id="JS条件"><a href="#JS条件" class="headerlink" title="JS条件"></a>JS条件</h2><ol>
<li>和<strong>c</strong>的语法几乎一样</li>
<li><strong>default</strong> 关键词规定不存在 <strong>case</strong> 匹配时所运行的代码</li>
</ol>
<h2 id="JS循环"><a href="#JS循环" class="headerlink" title="JS循环"></a>JS循环</h2><ol>
<li><strong>for/in</strong>循环遍历对象的属性</li>
<li><strong>continue</strong> 语句（不论有无标签引用）只能用于**<em>跳过一个迭代**</em>。</li>
<li><strong>break</strong> 语句，如果没有标签引用，只能用于*<strong>跳出一个循环或一个*** *</strong>switch*<strong>。如果有标签引用，则 break 语句可用于**<em>跳出任意代码块</em></strong></li>
</ol>
<h2 id="JS类型装换"><a href="#JS类型装换" class="headerlink" title="JS类型装换"></a>JS类型装换</h2><ol>
<li><p>对象类型：数组，日期，对象</p>
</li>
<li><p><strong>NaN</strong>的数据类型是数值，<strong>null</strong>的数据类型是对象，未定义变量和未赋值的变量类型是<strong>undefined</strong></p>
</li>
<li><p><strong>typdef</strong>是运算符始终会返回字符串</p>
</li>
<li><p><strong>onstructor</strong>返回所有<strong>JS</strong>变量的构造器函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1;  检查，某个对象是否为数组（就是看看有没有Array单词）；myDate.constructor &#x3D;&#x3D;&#x3D; Date;                          是否为日期函数</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="5">
<li><p><strong>Number()**将字符串转化为数值，</strong>“ ”<strong>，</strong>“ ，”<strong>为</strong>0<strong>，其他的是</strong>null**；也可以把布尔转化为数字</p>
</li>
<li><p>一元**+**运算符，可以把字符串转化为数值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x &#x3D; “5”;</span><br><span class="line">var x &#x3D; +y;</span><br></pre></td></tr></table></figure>
<p> x是数字，如果无法转化变量，仍然会变成数字但是值是<strong>NaN</strong></p>
</li>
<li><p>日期转化为数字：<strong>Number()**和日期方法</strong>getTime()<strong>相同</strong></p>
</li>
</ol>
<h2 id="JS正则表达式"><a href="#JS正则表达式" class="headerlink" title="JS正则表达式"></a>JS正则表达式</h2><ol>
<li><p>**search()**表达式来搜索匹配，返回匹配的位置</p>
<p><strong>1</strong>     可以接受字符串最为参数，他将被转换为正则表达式</p>
<p><strong>2</strong>     **replace()**函数类似于此，但是它的功能是替换指定的字符串</p>
</li>
<li><p>正则表达式修饰符：<strong>i(**执行对大小写不敏感的操作</strong>),g<strong>（全局操作）</strong>,m**（执行多行匹配）</p>
</li>
<li><p>正则表达式模式：</p>
<p><strong>1</strong>    <strong>[abc\</strong>*]**查找方括号内的任意字符</p>
<p><strong>2</strong>    <strong>[0-9]**</strong>查找<strong>0-9</strong>的任意数字</p>
<p><strong>3</strong>    <strong>(x|y)**</strong>查找由**|**分隔的任一项</p>
<p><strong>4</strong>    **(red|blue|black)**查找任何指定的选项</p>
<p><strong>5</strong>    <strong>[^abc\</strong>*]**查找不在方括号内的字符</p>
</li>
<li><p>元字符：</p>
<p><strong>1</strong>     <strong>“.”</strong>匹配任意的单个字符，换行符除外与行结束符</p>
<p><strong>2</strong>     <strong>\w**</strong>查找单词字符（<strong>\W</strong>查找非单词字符）</p>
<p><strong>3</strong>     <strong>\d**</strong>查找数字字符（<strong>\D</strong>查找非数字字符）</p>
<p><strong>4</strong>     <strong>\s**</strong>查找空白字符**(\S**查找非空白字符)</p>
<p><strong>5</strong>     <strong>\b**</strong>匹配单词边界（<strong>\B</strong>匹配非单词边界）</p>
<p><strong>6</strong>     <strong>\0**</strong>查找<strong>NULL</strong>字符</p>
<p><strong>7</strong>     <strong>\n</strong>查找换行符</p>
<p><strong>8</strong>     <strong>\xxx**</strong>、<strong>\xdd</strong>、<strong>\uxxxx</strong>匹配<strong>8</strong>、<strong>16</strong>、<strong>32</strong>进制的字符</p>
</li>
<li><p>量词：</p>
<p><strong>1</strong>     <strong>n+**匹配包含至少有一个</strong>n**的字符串</p>
<p><strong>2</strong>     <strong>\n</strong>匹配包含<strong>0</strong>个或者多<strong>n</strong>的字符串</p>
<p><strong>3</strong>     <strong>n?</strong> 匹配包含<strong>0</strong>个或者<strong>1</strong>个<strong>n</strong>的字符串</p>
<p><strong>4</strong>     <strong>n{x}**</strong>匹配包含<strong>x**</strong>个<strong>n</strong>的序列的字符串</p>
<p><strong>5</strong>     <strong>n{x,y}**</strong>匹配包含<strong>x</strong>个至<strong>y</strong>个<strong>n</strong>的序列的字符串</p>
<p><strong>6</strong>     <strong>n{x,}**</strong>匹配至少包含<strong>x</strong>个<strong>n</strong>的序列的字符串</p>
<p><strong>7</strong>     <strong>n$**</strong>匹配以<strong>n</strong>结尾的字符串</p>
<p><strong>8</strong>     <strong>^n**</strong>匹配以<strong>n</strong>开头的字符串</p>
<p><strong>9</strong>     <strong>?=n</strong>匹配任何其后紧接指定字符串 n 的字符串。</p>
<p><strong>10</strong>   <strong>?!n</strong>匹配任何其后没有紧接指定字符串 n 的字符串。</p>
</li>
<li><p>在 <strong>JavaScript</strong> 中，<strong>RegExp</strong> 对象是带有预定义属性和方法的正则表达式对象</p>
<p><strong>1</strong>     <strong>compile</strong>编译正则表达式</p>
<p><strong>2</strong>     <strong>test()**检索字符值，返回</strong>true<strong>或者</strong>false**</p>
<p><strong>3</strong>     **exec()**检索字符值，，返回指定的值并确定位置</p>
</li>
<li><p><strong>math()**找到一个或者多个正则表达式的匹配，找不到返回</strong>null**</p>
</li>
</ol>
<h2 id="JS异常"><a href="#JS异常" class="headerlink" title="JS异常"></a>JS异常</h2><ol>
<li><strong>finally</strong> 使您能够执行代码，在 <strong>try</strong> 和 <strong>catch</strong> 之后，无论结果如何</li>
<li><strong>JavaScript</strong> 实际上会创建带有两个属性的 <strong><em>Error</em></strong> <strong><em>对象</em></strong>：<strong>name</strong> 和 <strong>message</strong>分别设置并返回错误名或者设置并返回错误消息</li>
<li><strong>val()</strong> 函数可将字符串转换为代码执行，并返回一个或多个值</li>
<li><strong>encodeURI()**函数作用：可把字符串作为 **URI</strong> 进行编码。参数：必需。一个字符串，含有 URI 或其他要编码的文本。</li>
</ol>
<h2 id="JS变量范围"><a href="#JS变量范围" class="headerlink" title="JS变量范围"></a>JS变量范围</h2><ol>
<li>如果您为尚未声明的变量赋值，此变量会自动生成并成为全局变量。</li>
<li>通过 <strong>JavaScript</strong>，全局作用域形成了完整的 <strong>JavaScript</strong> 环境。在 <strong>HTML</strong> 中，全局作用域是 <strong>window</strong>。所有全局变量均属于 window 对象。</li>
<li>除非有意为之，否则请勿创建全局变量。您的全局变量（或函数）能够覆盖 <strong>window</strong> 变量（或函数）。任何函数，包括 <strong>window</strong> 对象，能够覆盖您的全局变量和函数。</li>
</ol>
<h2 id="JS提升"><a href="#JS提升" class="headerlink" title="JS提升"></a>JS提升</h2><p><strong>1</strong>     提升（<strong>Hoisting</strong>）是 J<strong>avaScript</strong> 将声明移至顶部的默认行为。</p>
<p><strong>2</strong>     在 <strong>JavaScript</strong> 中，可以在使用变量之后对其进行声明。</p>
<p><strong>3</strong>     用<strong>let</strong>和<strong>const</strong>声明的变量和关键字不能提升</p>
<p><strong>4</strong>     初始化不能被提升</p>
<h2 id="vue-js"><a href="#vue-js" class="headerlink" title="vue.js"></a>vue.js</h2><ol>
<li><p>引入vue：</p>
<p>1     直接下载并用 <code>&lt;script&gt;</code> 标签引入，<code>Vue</code> 会被注册为一个全局变量。</p>
<p>2     CDN引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>3     声明式渲染：视图和脚本</p>
<p>视图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id &#x3D; “app”&gt; &#123;&#123;message&#125; &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>脚本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">                 el : ‘#app’,</span><br><span class="line">                 data:&#123;</span><br><span class="line">                    message:’HELLO VUE!’ </span><br><span class="line">                 &#125; </span><br><span class="line">&#125;)；</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>​    2     一个 <strong>Vue</strong> 应用会将<strong>HTML</strong>挂载到一个 <strong>DOM</strong> 元素上 (对于这个例子是 <code>#app</code>) 然后对其进行完全控制。那个 <strong>HTML</strong> 是我们的入口，但  其余都会发生在新创建的 <strong>Vue</strong> 实例内部。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式与爬虫</title>
    <url>/2021/01/03/%E5%91%A8%E6%8A%A54/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="创新实践周报4"><a href="#创新实践周报4" class="headerlink" title="创新实践周报4"></a>创新实践周报4</h1><p>$$<br>本周工作计划</p>
<ol>
<li>   机械学习线性代数基础完成第二章</li>
<li>   进一步学习js以及vue.js</li>
<li>   进一步学习正则表达式以及爬虫知识</li>
<li>   JS的表单对象和函数<br>$$</li>
</ol>
<hr>
<p>[TOC]</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>1      一般字符： <strong>“.”</strong>，匹配任意的单个字符；<strong>“\”</strong>转义字符；<strong>“[…]”</strong>字符集，对应字符集的任意字符。</p>
<p>2      预定义字符集：<strong>\d</strong>匹配一个数字字符\D匹配一个非零数字字符<strong>\s</strong>匹配任何空白字（空格 换行符 制表符换页符等）<strong>\S</strong>匹配任何非空字符<strong>\w</strong>匹配包括下划线的任意单词字符\W匹 配任何非单词字符。</p>
<p>3      数量词：*<strong>**匹配前一个0或无限次+匹配前一个1或无限次</strong>？<strong>匹配前一个0或1次</strong>{m}<strong>匹配前一个m次</strong>{m,n}**匹配前一个m-n次</p>
<p>4      边界匹配：<strong>＾</strong>匹配字符串的开头（＾abc匹配abc开头的字符串）**$<strong>匹配字符串结尾</strong>\A<strong>仅匹配字符串开头</strong>\Z**仅匹配字符串结尾</p>
<p>5      非贪心算法：*<em>（.<em>？）</em></em>匹配任意字符，</p>
<p>6      <strong>search()**函数：匹配并提取符合规律的内容返回的是正则表达式对象</strong>re.search(pattern,string,flage),**分别为要匹配的正则表达式，匹配的字符串，以及标志（是否换行，是否区分大小写等）</p>
<p>7      <strong>sub()**函数用于替换字符串中的匹配项。</strong>re.sub(pattern,repl,string,count = 0,flage)repl<strong>是要替换的字符串，</strong>count**是模式匹配后替换的最大次数默认0表示替换所有的匹配。</p>
<p>8      <strong>findall</strong>函数匹配所有符合规律的内容并且以列表的形式返回结果。</p>
<p>9      <strong>re</strong>的模块修饰符：<strong>I</strong>使匹配对大小写不敏感，<strong>L</strong>做本地化识别<strong>M</strong>多行匹配影响**$<strong>和</strong>＾S<strong>匹配包括换行符在内的所有字符U根据Unicode解析字符</strong>X**该标志通过给予更加灵活的方式以便于将正则表达式更易理解</p>
<p>10     **strip()**方法去除换行符</p>
<p>11     在爬取斗破小说的时候用到了构造多页URL的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Urls &#x3D; [‘http.html’.format (str (i)) for i in range(n,m)]</span><br></pre></td></tr></table></figure>






<h2 id="Xpath以及xlml库"><a href="#Xpath以及xlml库" class="headerlink" title="Xpath以及xlml库"></a>Xpath以及xlml库</h2><p>1     Xpath节点选择：</p>
<ul>
<li><p>Nodename—选取此节点的所有子节点</p>
</li>
<li><p>/从根节点选取</p>
</li>
<li><p>//从匹配选择的当前节点选择文档中的节点，不考虑它的位置</p>
</li>
<li><p>.选取当前节点</p>
</li>
<li><p>..选取当前节点的父节点</p>
</li>
<li><p>@选取属性</p>
</li>
<li><p><strong>etree.HTML（）</strong>把<strong>html</strong>文本转化为<strong>HTML</strong>对象，要打印<strong>html</strong>内容，使用<strong>etree.tostring（）</strong></p>
</li>
<li><p>有时候遇到相同字符开头的标签，通过<strong>start-with()</strong>;遇到表嵌套标签的情况通过<strong>string(.)</strong><br>$$<br>这里本来是几张图的但是由于能力有限暂时不能显示，阿巴阿巴。。。<br>$$</p>
</li>
</ul>
<h2 id="vue-js"><a href="#vue-js" class="headerlink" title="vue.js"></a>vue.js</h2><ol>
<li><p>使用<strong>v-clock</strong>指令可以解决插值表达式的闪烁问题，添加属性<strong>v-clcok</strong>然后在<strong>head</strong>中创建一个样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style：[v-clock] : &#123;display : none;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以在标题标签中添加<strong>v-text</strong>属性，默认<strong>v-text</strong>属性没有闪烁问题，但是会覆盖元素中原本的内容，插值表达式只会替换自己的占位符不会把整个元素内容清空。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p v-cloak&gt; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123; &#123; mes &#125; &#125;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;h4 v-text&#x3D; &quot;mes &quot;&gt;-&#x3D;-&#x3D;-&#x3D;--&#x3D;-&lt;&#x2F;h4&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li><p><strong>v-html = “mes”</strong> 使得<strong>mes</strong>以<strong>mes</strong>当成<strong>html</strong>输出，也会覆盖元素内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; mes2 &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-html&#x3D;&quot;mes2&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>





</li>
</ol>
]]></content>
      <tags>
        <tag>正则表达式</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>JSDOM</title>
    <url>/2021/01/03/%E5%91%A8%E6%8A%A55/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="创新实践周报5"><a href="#创新实践周报5" class="headerlink" title="创新实践周报5"></a>创新实践周报5</h1><p>$$<br>上完上次的课，我们小组对每个人的分工重新规划了一下，我被规划到后台开发，所以得重头开始，还要去学习Java，不过我学了c++在进行Java的学习应该不会很难，所以我的计划被打破了，这学期本着后台为主进行学习。<br>$$</p>
<p>[TOC]</p>
<h2 id="JSdom"><a href="#JSdom" class="headerlink" title="JSdom"></a>JSdom</h2><ol>
<li><p><strong>document</strong>对象：</p>
<p>1     查找html对象：**document.getElemementById（-ByTagName、-ByClassName）(NAME)**查找id、标签和类名。</p>
<p>2     改变html方法：</p>
<table>
<thead>
<tr>
<th>element.innerHTML = new html content</th>
<th>改变元素的inner HTML</th>
</tr>
</thead>
<tbody><tr>
<td><strong>element.attribute = new value</strong></td>
<td><strong>改变HTML元素的属性值</strong></td>
</tr>
<tr>
<td><strong>element.setAttribute(attribute, value)</strong></td>
<td><strong>改变HTML元素的属性值</strong></td>
</tr>
<tr>
<td><strong>element.style.property = new style</strong></td>
<td><strong>改变HTML元素的样式</strong></td>
</tr>
<tr>
<td>document.createElement(element)****</td>
<td><strong>创建HTML元素</strong></td>
</tr>
<tr>
<td><strong>document.removeChild(element)</strong></td>
<td><strong>删除HTML元素</strong></td>
</tr>
<tr>
<td><strong>document.appendChild(element)</strong></td>
<td><strong>添加HTML元素</strong></td>
</tr>
<tr>
<td><strong>document.replaceChild(element)</strong></td>
<td><strong>替换 HTML元素&lt;</strong></td>
</tr>
<tr>
<td><strong>document.write(text)</strong></td>
<td><strong>写入HTML输出流</strong></td>
</tr>
</tbody></table>
<p>2.添加事件处理程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById( id).onclick &#x3D; function()&#123;code&#125;   &#x2F;&#x2F;向onclick 事件添加事件处理程序</span><br></pre></td></tr></table></figure></li>
<li><p>DOM元素：</p>
<p>1     通过ID来查找：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var c &#x3D; document.getElementById(‘name’)</span><br></pre></td></tr></table></figure>
<p>2      通过标签来查找：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var c &#x3D; document.getElementByTagName(&quot;p&quot;)         &#x2F;&#x2F;查找所有&lt;p&gt;中的元素然后储存在列表中。</span><br></pre></td></tr></table></figure>
<p>3     通过类名查找</p>
<p>4     通过CSS选择器查找html元素，如果您需要查找匹配指定 CSS 选择器（id、类名、类型、属性、属性值等等）的所有 HTML 元    素，请使用<strong>querySelectorAll（）</strong>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Var x &#x3D; document.querySelectorAll(“p.intor”)          &#x2F;&#x2F;返回class&#x3D; “intor”的所有&lt;p&gt;元素列表</span><br></pre></td></tr></table></figure>
<p>5     DOM允许JS改变html元素内容：</p>
<p>​      1     改变html输出流：<strong>document.write()**直接写入html输出流，千万不要在文档加载后使用</strong>document.write()**。这么做会覆盖文档。</p>
<p>​      2     改变html元素内容：使用innerHTML</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;Hello world ! &lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById( &quot;p1&quot;).innerHTML &#x3D; &quot;hello kitty! &quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>​     3      改变属性的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img id&#x3D;&quot;my Image&quot; src&#x3D;&quot;smiley.gif&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById( &quot;myImage&quot; ).src &#x3D; &quot;landscape.jpg&quot; ;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>​            4      改变html样式：<strong>document.getElementById(id).style.property = new style</strong></p>
</li>
</ol>
<p>3.动画</p>
<p>​            1     创建动画容器：所有的动画都应该与容器元素相关</p>
<p>​            2     为动画添加样式：通过<strong>style = “position:relative”</strong>与<strong>style = “position:absolute”</strong>创建容器元素</p>
<p>​            3      动画代码：JavaScript动画是通过对元素样式进行渐进式变化编程完成的。这种变化通过一个计数器来调用。当计数器间隔很    小时，动画看上去就是连贯的。</p>
<p>4.DOM事件</p>
<p>1     当用户进入后及离开页面时，会触发 <strong>onload</strong>和 <strong>onunload</strong>事件。<strong>onload</strong>事件可用于检 测访问者的浏览器类型和浏览器版本，然后基于该信息加载网页的恰当版本。<strong>onload</strong> 和 <strong>onunload</strong>事件可用于处理 cookie</p>
<p>2     <strong>onchange</strong>事件：<strong>onchange</strong>事件经常与输入字段验证结合使用。<img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p>
<p>3     <strong>onmouseover**</strong>与onmouseout****事件用于当用户将鼠标移至 HTML元素上或移出时触发某个函数<img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p>
<p>4     <strong>onmousedown</strong>和<strong>onmouseup</strong>以及onclick事件：首先当鼠标按钮被点击时，<strong>onmousedown</strong>事件被触发；然后当鼠标按钮被释放时，<strong>onmouseup</strong> 事件被触发；最后，当鼠标点击完成后，<strong>onclick</strong> 事件被触发<img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg" alt="img"></p>
<p><strong>DOM</strong>事件监听器</p>
<p>1    <strong>addEventListener()方法</strong>：为元素附加事件处理程序而不会覆盖已有的事件处理程序。您能够向一个元素添加多个事件处理程序。您能够向任何 DOM对象添加事件处理程序而非仅仅 HTML 元素，例如 window对象。<strong>addEventListener()**方法使我们更容易控制事件如何对冒泡作出反应。当使用 **addEventListener()**方法时，JavaScript 与 HTML 标记是分隔的，已达到更佳的可读性；即使在不控制 HTML标记时也允许您添加事件监听器。您能够通过使用 **removeEventListener()</strong> 方法轻松地删除事件监听器。</p>
<p>语法：**element.addEventListener(event,function,useCapter)**第三个参数为布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的。默认值是 false，将使用冒泡传播，如果该值设置为 true，则事件使用捕获传播。第一个参数为事件类型。</p>
<p><strong>2</strong>    <img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg" alt="img"></p>
<p><strong>3</strong>    <img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg" alt="img"><img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" alt="img"></p>
<p><strong>4</strong>    创建html节点：</p>
<p><img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" alt="img"></p>
<p><strong>5</strong>    创建html新元素：使用**insertBefore()**方法</p>
<p><img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img"></p>
<p>5     v-bind指令：vue中用于绑定属性，其中也可以写入正确的js表达式。<img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" alt="img"></p>
<p>也可以简写成:titlt = “*****”</p>
<p>6     v-on指定为属性的绑定指令，缩写为@，v-on:事件=“”</p>
<p>7     定时器：setInterval清除定时器：clearInterval</p>
]]></content>
      <tags>
        <tag>JS</tag>
        <tag>前端</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2021/01/03/%E5%91%A8%E6%8A%A56/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="创新实践周报6"><a href="#创新实践周报6" class="headerlink" title="创新实践周报6"></a>创新实践周报6</h1><p>\1.   学习了Java的大部分类，以及接口，集合，泛型，异常处理等等。</p>
<p>\2.   观看学习视频，这个up主是用虚拟机lunix环境下进行操作的，考虑到完整性（因为和这个视频的项目是比较完整的，可以看做参考）于是，就搭建了同样的环境</p>
<p>\3.   前端的学习也在看：</p>
<p><strong>DOM</strong>导航</p>
<p><strong>1</strong>     DOM 处理中的一种常见错误是认为元素节点中包含文本。<img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p>
<p>访问 innerHTML 属性等同于访问首个子节点的 nodeValue</p>
<p><strong>注释：</strong>nodeName 总是包含 HTML 元素的大写标签名。<img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg" alt="img"><img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" alt="img"></p>
<p>4     <img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" alt="img"></p>
<p>5   <img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img"></p>
<p><strong>6</strong>     <img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" alt="img">如需删除某个 HTML 元素，您需要知晓该元素的父：</p>
<p>8     替换元素：<img src="file:///C:/Users/86178/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg" alt="img"></p>
<p><strong>DOM</strong>集合</p>
<p><strong>1</strong>     <strong>getElementTagName</strong>（）返回 html<strong>的Collection</strong>对象，<strong>HTMLCollection</strong> 对象是类数组的 HTML 元素列表（集合）。</p>
<p><strong>var x = document. getElementTagName(“p”)**</strong>选取所有<p><strong><strong>元素，通过索引访问x</strong></strong>中的对象：x[0]**</p>
<p>2   length 属性定义了 HTMLCollection 中元素的数量</p>
<p><strong>3</strong>   <strong>HTMLCollection</strong> <strong>并非数组！</strong></p>
<p><strong>DOM</strong>节点列表</p>
<p><strong>1</strong>     <strong><em>NodeList</em></strong> 对象是从文档中提取的节点列表（集合）。NodeList 对象与 HTMLCollection 对象几乎相同。</p>
<p><strong>2</strong>     如使用 getElementsByClassName() 方法，某些（老的）浏览器会返回 NodeList 对象而不是 HTMLCollection。</p>
<p><strong>3</strong>     所有浏览器都会为 childNodes 属性返回 NodeList 对象。</p>
<p><strong>4</strong>     大多数浏览器会为 querySelectorAll() 方法返回 NodeList 对象。</p>
<p>另外根据小组项目查阅了相关资料，再加上老师给的关于新苗的一些参看资料，小组进行了相关讨论，并深入了解项目</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>docker、mysql</title>
    <url>/2021/01/03/%E5%91%A8%E6%8A%A57/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="创新实践周报7"><a href="#创新实践周报7" class="headerlink" title="创新实践周报7"></a>创新实践周报7</h1><p>1.使用虚拟机下载docker，熟悉关键的docker基本指令。</p>
<p>​    docker run -d 后台运行容器并返回容器id</p>
<p>   docker run –name=”***”      为容器给了一个新名字</p>
<p>   docker start/stop id/name   运行或停止一个容器</p>
<p>   docker rm name        删除容器</p>
<p>   docker exec -t name /bin/bash      进入容器</p>
<p>   docker ps      显示运行中的容器状态</p>
<p>   pocker ps -a      显示全部的容器状态</p>
<p>   docker images      显示本地镜像</p>
<p>   docker pull 镜像名称 tag  下载镜像</p>
<p>   mysql -uroot -p 加密码    进入到mysql</p>
<p>   pwd            进入mysql界面</p>
<p>   rm -rf 非空目录名     删除目录</p>
<p>   mkdir 名字        创建文件</p>
<p>   docker-compose安装时的chmod +x       更改权限成可执行模式</p>
<p>2.创建mysql容器</p>
<p>   使用docker-compose创建</p>
<p>   1.创建相关目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir db</span><br><span class="line"></span><br><span class="line">mkdir conf</span><br><span class="line"></span><br><span class="line">mkdir log</span><br></pre></td></tr></table></figure>
<p>2.配置<strong>docker-compose.yml**</strong>文件**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;***&#39;</span><br><span class="line">services:</span><br><span class="line">    mysql:</span><br><span class="line">        container_name: &quot;*****&quot;</span><br><span class="line">        network_mode: &quot;host&quot;</span><br><span class="line">        environment:</span><br><span class="line">            MYSQL_ROOT_PASSWORD: &quot;*****&quot;</span><br><span class="line">            MYSQL_USER: &#39;root&#39;</span><br><span class="line">            MYSQL_PASS: &#39;*****&#39;</span><br><span class="line">        image: &quot;mysql:tag&quot;</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - 3306:3306</span><br><span class="line">        volumes:</span><br><span class="line">            - &quot;&#x2F;home&#x2F;aosp&#x2F;docker&#x2F;mysql&#x2F;db:&#x2F;var&#x2F;lib&#x2F;mysql&quot;</span><br><span class="line">            - &quot;&#x2F;home&#x2F;aosp&#x2F;docker&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&quot;</span><br><span class="line">            - &quot;&#x2F;home&#x2F;aosp&#x2F;docker&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>3.创建容器</p>
<p><strong>docker-compose up -d</strong></p>
<p>\3. 创建数据库和数据表</p>
<p>1.先创建数据库</p>
<p><strong>mysql&gt; create database if not exists sob_blog character set utf8;</strong></p>
<p><strong>Query OK, 1 row affected (0.00 sec)</strong></p>
<p>2.切换数据库</p>
<p>mysql&gt; use sob_blog;</p>
<p>Database changed</p>
<p>\3. 创建数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb_user(</span><br><span class="line">    id VARCHAR(32) NOT NULL   COMMENT &#39;ID&#39; ,</span><br><span class="line">    user_name VARCHAR(32) NOT NULL   COMMENT &#39;用户名&#39; ,</span><br><span class="line">    password VARCHAR(128) NOT NULL   COMMENT &#39;密码&#39; ,</span><br><span class="line">    avatar VARCHAR(32) COMMENT &#39;头像&#39; ,</span><br><span class="line">    email VARCHAR(128) NOT NULL   COMMENT &#39;邮箱&#39; ,</span><br><span class="line">    sign VARCHAR(1024) COMMENT &#39;签名&#39; ,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) COMMENT &#x3D; &#39;tb_user &#39;;;</span><br></pre></td></tr></table></figure>
<p>\4. 创建分类表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb_category(</span><br><span class="line">    id VARCHAR(32) NOT NULL   COMMENT &#39;ID&#39; ,</span><br><span class="line">    category_name VARCHAR(32) NOT NULL   COMMENT &#39;分类名称&#39; ,</span><br><span class="line">    category_py VARCHAR(32) NOT NULL   COMMENT &#39;分类拼音&#39; ,</span><br><span class="line">    description VARCHAR(1024) NOT NULL   COMMENT &#39;描述说明&#39; ,</span><br><span class="line">    &#96;order&#96; INT NOT NULL  DEFAULT 0 COMMENT &#39;顺序&#39; ,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) COMMENT &#x3D; &#39;tb_category &#39;;</span><br></pre></td></tr></table></figure>
<p>\5. 创建文章表*</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb_article(</span><br><span class="line">    id VARCHAR(32) NOT NULL   COMMENT &#39;ID&#39; ,</span><br><span class="line">    user_id VARCHAR(32) NOT NULL   COMMENT &#39;用户ID&#39; ,</span><br><span class="line">    category_id VARCHAR(32)    COMMENT &#39;分类ID&#39; ,</span><br><span class="line">    content VARCHAR(32)    COMMENT &#39;内容&#39; ,</span><br><span class="line">    type INT    COMMENT &#39;类型 0表示富文本，1表示markdown&#39; ,</span><br><span class="line">    status INT NOT NULL   COMMENT &#39;状态 0表示已经发布，1表示草稿</span><br><span class="line">    2表示等待发布&#39; ,</span><br><span class="line">    view_count INT   DEFAULT 0 COMMENT &#39;浏览量&#39; ,</span><br><span class="line">    publish_time DATETIME    COMMENT &#39;发布时间&#39; ,</span><br><span class="line">    update_time DATETIME    COMMENT &#39;更新时间&#39; ,</span><br><span class="line">    PRIMARY KEY (id),</span><br><span class="line">    FOREIGN KEY(user_id) REFERENCES tb_user(id),</span><br><span class="line">    FOREIGN KEY(category_id) REFERENCES tb_category(id)</span><br><span class="line">) COMMENT &#x3D; &#39;tb_article &#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>\5. 创建轮播图表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb_looper(</span><br><span class="line">    id VARCHAR(32) NOT NULL   COMMENT &#39;ID&#39; ,</span><br><span class="line">    url VARCHAR(1024)    COMMENT &#39;轮播图的Url&#39; ,</span><br><span class="line">    path VARCHAR(1024)    COMMENT &#39;图片路径&#39; ,</span><br><span class="line">    title VARCHAR(128)    COMMENT &#39;标题&#39; ,</span><br><span class="line">    &#96;order&#96; INT    COMMENT &#39;顺序&#39; ,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) COMMENT &#x3D; &#39;tb_looper &#39;;</span><br></pre></td></tr></table></figure>
<p>\6. 创建文章每日访问量表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tb_kpi_daily(</span><br><span class="line">    id VARCHAR(32) NOT NULL   COMMENT &#39;ID&#39; ,</span><br><span class="line">    view_count INT NOT NULL  DEFAULT 0 COMMENT &#39;浏览量&#39; ,</span><br><span class="line">    update_time DATETIME NOT NULL   COMMENT &#39;更新时间&#39; ,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">) COMMENT &#x3D; &#39;tb_kpi_daily 每天访问量统计表&#39;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
        <tag>容器</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IDEA搭建后台项目</title>
    <url>/2021/01/03/%E5%91%A8%E6%8A%A58/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="创新实践8"><a href="#创新实践8" class="headerlink" title="创新实践8"></a>创新实践8</h1><p>1.后台服务程序，也就是这部分程序，这是最基本的，也是最重要的。使用javaWeb实现。</p>
<p> \1. 选择create New project</p>
<p> \2. 选择maven,如果你熟悉或者有自己经常使用的模板可以选择。</p>
<p> \3. 选择项目路径，finish</p>
<p> 4.创建包和Application类: Application要放在外层，否则无法扫描子包里的东西。也就是它要在其他包的外层。这样子才可以扫描到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package net.sunofbeaches;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line">public class BlogApplication &#123;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    SpringApplication.run(BlogApplication.class, args);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p> \5. 配置内容包含很多，数据库呀，端口呀，服务名称，消息队列…先只配置端口和名称，其他的我们用到再进行配置。</p>
<p>在resources目录下，创建application.yml文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line"></span><br><span class="line"> application:</span><br><span class="line"></span><br><span class="line">  name: sob-blog</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line"></span><br><span class="line"> port: 8080</span><br></pre></td></tr></table></figure>
<p> 6.编写pom.xml文件</p>
<p> 这个文件是自动生成的，需要加一些依赖，所需要的的如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;net.sunofbeach&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sob-blog-system-demo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;sob-blog-system&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;https:&#x2F;&#x2F;www.sunofbeach.net&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;inceptionYear&gt;2020-Now&lt;&#x2F;inceptionYear&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line"></span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;sob-blog-system-1.0.0&lt;&#x2F;finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;mainClass&gt;net.sunofbeach.blog.BlogApplication&lt;&#x2F;mainClass&gt;</span><br><span class="line">                    &lt;includeSystemScope&gt;true&lt;&#x2F;includeSystemScope&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
<p>然后构建就完成了。</p>
<p>2.连接数据库：</p>
<p> \1. 之前我们在配置文件里配置了端口和名称，接下来配置一下数据库相关的内容</p>
<p>配置在application.yml文件里的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 2020</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: sob_blog_system</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;192.168.190.129:3306&#x2F;sob_blog_system?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: test_mysql_2</span><br><span class="line">    password: my-secret-pw</span><br></pre></td></tr></table></figure>
<p>注意问题：</p>
<p>1.信息不要填错</p>
<p>2.如果是远程路径，或者是网络路径则填写网络路径</p>
<p>3.要记得开放端口</p>
<p>4.驱动不要错</p>
<p>3.JavaBean：简单一句，封装数据。提供getter和setter。Pojo。创建了一个包，叫做pojopojo的原单词是Plain Ordinary Java Object 翻译过来大概是简单的java对象。JavaBean类与数据库字段对应，好在现在有逆向工程，或者我们的工具，可以直接帮助我们生成对应的java类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package net.sunofbeach.blog.pojo;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private String userName;</span><br><span class="line">    private int age;</span><br><span class="line">    private String gender;</span><br><span class="line"></span><br><span class="line">    public User(String userName, int age, String gender) &#123;</span><br><span class="line">        this.userName &#x3D; userName;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName &#x3D; userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(String gender) &#123;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private House house;</span><br><span class="line"></span><br><span class="line">    public House getHouse() &#123;</span><br><span class="line">        return house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHouse(House house) &#123;</span><br><span class="line">        this.house &#x3D; house;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>blog</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
